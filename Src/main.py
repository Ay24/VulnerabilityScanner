import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QLineEdit, QPushButton, QProgressBar, QTextEdit, QListWidget)
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QPalette, QColor
import requests
from bs4 import BeautifulSoup
import urllib.parse

class ScanThread(QThread):
    progress_signal = pyqtSignal(int)
    result_signal = pyqtSignal(str)
    vuln_signal = pyqtSignal(str)
    
    def __init__(self, url):
        super().__init__()
        self.url = url

    def run(self):
        self.crawl(self.url)

    def add_result(self, message):
        self.result_signal.emit(message)

    def add_vuln(self, vuln):
        self.vuln_signal.emit(vuln)

    def check_sql_injection(self, url):
        sql_payloads = [
            "'",
            "' OR '1'='1",
            "' OR '1'='1' -- ",
            "' OR 1=1 -- ",
            "admin' --",
            "' UNION SELECT NULL, NULL -- "
        ]
        for payload in sql_payloads:
            target_url = f"{url}{payload}"
            self.add_result(f"Testing SQL Injection on {target_url}")
            try:
                response = requests.get(target_url)
                if "SQL" in response.text or "sql" in response.text or "error" in response.text:
                    self.add_result(f"[!] SQL Injection vulnerability detected with payload: {payload}")
                    self.add_vuln(f"SQL Injection: {target_url} with payload: {payload}")
                    break
            except requests.RequestException as e:
                self.add_result(f"Error testing SQL Injection on {target_url}: {e}")

    def check_xss(self, url):
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<svg/onload=alert('XSS')>"
        ]
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = soup.find_all('form')

            for form in forms:
                action = form.get('action')
                method = form.get('method', 'get').lower()
                form_url = urllib.parse.urljoin(url, action)
                inputs = form.find_all('input')

                for payload in xss_payloads:
                    data = {}
                    for input in inputs:
                        input_name = input.get('name')
                        input_value = input.get('value', '')
                        data[input_name] = input_value

                    if data:
                        data[list(data.keys())[0]] = payload

                    self.add_result(f"Testing XSS on form at {form_url} with method {method} using payload: {payload}")
                    if method == 'post':
                        response = requests.post(form_url, data=data)
                    else:
                        response = requests.get(form_url, params=data)

                    if payload in response.text:
                        self.add_result(f"[!] XSS vulnerability detected in form: {action}")
                        self.add_vuln(f"XSS: {form_url} with payload: {payload}")
                        break
        except requests.RequestException as e:
            self.add_result(f"Error testing XSS on {url}: {e}")

    def crawl(self, url):
        visited = set()
        to_visit = [url]
        total_urls = 0

        while to_visit:
            current_url = to_visit.pop()
            if current_url in visited or "google.com" in current_url or "youtube.com" in current_url:
                continue

            visited.add(current_url)
            try:
                self.add_result(f"Crawling URL: {current_url}")
                response = requests.get(current_url)
                soup = BeautifulSoup(response.text, 'html.parser')

                for link in soup.find_all('a'):
                    href = link.get('href')
                    if href:
                        full_url = urllib.parse.urljoin(current_url, href)
                        if full_url not in visited:
                            to_visit.append(full_url)
                            total_urls += 1

                for form in soup.find_all('form'):
                    form_action = form.get('action')
                    form_url = urllib.parse.urljoin(current_url, form_action)
                    self.add_result(f"Scanning form at: {form_url}")
                    self.check_sql_injection(form_url)
                    self.check_xss(form_url)

                self.progress_signal.emit(len(visited))
            except requests.RequestException as e:
                self.add_result(f"Error crawling {current_url}: {e}")

class VulnerabilityScanner(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Web Vulnerability Scanner')
        self.setGeometry(100, 100, 1000, 700)
        
        palette = QPalette()
        palette.setColor(QPalette.Window, QColor(45, 45, 45))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.Base, QColor(30, 30, 30))
        palette.setColor(QPalette.AlternateBase, QColor(45, 45, 45))
        palette.setColor(QPalette.ToolTipBase, QColor(255, 255, 255))
        palette.setColor(QPalette.ToolTipText, QColor(255, 255, 255))
        palette.setColor(QPalette.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.Button, QColor(45, 45, 45))
        palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.BrightText, QColor(255, 0, 0))
        palette.setColor(QPalette.Highlight, QColor(255, 140, 0))
        palette.setColor(QPalette.HighlightedText, QColor(0, 0, 0))
        self.setPalette(palette)

        main_layout = QHBoxLayout()

        # Main scanning area
        scan_layout = QVBoxLayout()

        self.label = QLabel('Enter the target URL:')
        scan_layout.addWidget(self.label)

        self.url_entry = QLineEdit()
        scan_layout.addWidget(self.url_entry)

        self.scan_button = QPushButton('Scan')
        self.scan_button.clicked.connect(self.start_scan)
        scan_layout.addWidget(self.scan_button)

        self.progress = QProgressBar()
        scan_layout.addWidget(self.progress)

        self.results_text = QTextEdit()
        self.results_text.setReadOnly(True)
        scan_layout.addWidget(self.results_text)

        self.quit_button = QPushButton('Quit')
        self.quit_button.clicked.connect(self.quit_app)
        scan_layout.addWidget(self.quit_button)

        main_layout.addLayout(scan_layout)

        # Vulnerabilities sidebar
        self.vuln_list = QListWidget()
        main_layout.addWidget(self.vuln_list)

        self.setLayout(main_layout)

        # Apply the QSS styles
        self.apply_styles()

    def apply_styles(self):
        qss = """
        QWidget {
            background-color: #2d2d2d;
            color: #ffffff;
            font-family: Arial, sans-serif;
            font-size: 14px;
        }

        QLineEdit, QTextEdit, QListWidget {
            background-color: #3e3e3e;
            border: 1px solid #5a5a5a;
            border-radius: 5px;
            padding: 5px;
        }

        QPushButton {
            background-color: #3e3e3e;
            border: 1px solid #5a5a5a;
            border-radius: 5px;
            padding: 5px;
        }

        QPushButton:hover {
            background-color: #5a5a5a;
        }

        QProgressBar {
            border: 1px solid #5a5a5a;
            border-radius: 5px;
            text-align: center;
        }

        QProgressBar::chunk {
            background-color: #ff8c00;
            border-radius: 5px;
        }
        """
        self.setStyleSheet(qss)

    def start_scan(self):
        target_url = self.url_entry.text().strip()
        if not target_url:
            self.results_text.append("Please enter a valid URL")
            return

        self.results_text.clear()
        self.vuln_list.clear()
        self.scan_thread = ScanThread(target_url)
        self.scan_thread.progress_signal.connect(self.update_progress)
        self.scan_thread.result_signal.connect(self.add_result)
        self.scan_thread.vuln_signal.connect(self.add_vuln)
        self.scan_thread.start()

    def update_progress(self, value):
        self.progress.setValue(value)

    def add_result(self, message):
        self.results_text.append(message)

    def add_vuln(self, vuln):
        self.vuln_list.addItem(vuln)

    def quit_app(self):
        QApplication.quit()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = VulnerabilityScanner()
    ex.show()
    sys.exit(app.exec_())
